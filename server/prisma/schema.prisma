// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  username       String
  nickname       String?          @unique
  password       String
  snsId          Int?             @unique
  provider       String?
  profileImg     String?
  backgroundImg  String?
  field          String?
  description    String?
  isSponsor      Boolean          @default(true)
  paymentHistory PaymentHistory[]
  post           Post[]
  comment        Comment[]
  manager        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  like           Like[]
  sponsor        Sponsor[]        @relation("SponsorToUser")
  sponsored      Sponsor[]        @relation("UserToSponsor")
}

model Sponsor {
  id          Int   @id @default(autoincrement())
  sponsor     User? @relation("SponsorToUser", fields: [sponsorId], references: [id])
  sponsorId   Int?
  sponsored   User? @relation("UserToSponsor", fields: [sponsoredId], references: [id])
  sponsoredId Int?

  @@index([sponsorId])
  @@index([sponsoredId])
}

model PaymentHistory {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @unique

  applyNum       String? @default("")
  bankName       String?
  buyerAddr      String
  buyerEmail     String
  buyerUsername  String
  sellerUsername String
  sellerEmail    String
  buyerPostcode  String
  buyerTel       String
  cardName       String
  cardNumber     String  @default("")
  cardQuota      Int     @default(0)
  currency       String
  customData     String?
  impUid         String  @unique
  merchantUid    String
  name           String
  paidAmount     Int
  paidAt         Int
  payMethod      String
  pgProvider     String
  pgTid          String
  pgType         String
  receiptUrl     String
  status         String
  success        Boolean
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String?
  content   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?      @unique
  viewCount Int       @default(0)
  postImg   String?
  comment   Comment[]
  like      Like[]

  @@unique([id, authorId])
}

model Like {
  id     Int   @id @default(autoincrement())
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?

  @@unique([postId, userId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  children  Comment[] @relation("CommentToComment")

  @@unique([id, authorId])
  @@index([parentId])
}
